import time
import math
import os
import requests
from web3 import Web3
from eth_account import Account
from hyperliquid.exchange import Exchange
from hyperliquid.info import Info

SONIC_RPC = "https://rpc.soniclabs.com"
web3 = Web3(Web3.HTTPProvider(SONIC_RPC))

POOL_ADDRESS = web3.to_checksum_address("0xa1538e790ccdd639755602857f582a39ed7f650c")
NFT_CONTRACT_ADDRESS = web3.to_checksum_address("0x12e66c8f215ddd5d48d150c8f46ad0c6fb0f4406")
WALLET = web3.to_checksum_address("0x056000BA3e844810cdd86A69F104e2c91203BE82")

# Hyperliquid config
# Load configuration from environment variables
account_address = os.getenv("HYPERLIQUID_ACCOUNT_ADDRESS")
secret_key = os.getenv("HYPERLIQUID_SECRET_KEY")

if not account_address or not secret_key:
    raise ValueError("HYPERLIQUID_ACCOUNT_ADDRESS and HYPERLIQUID_SECRET_KEY must be set as environment variables")

wallet = Account.from_key(secret_key)
base_url = "https://api.hyperliquid.xyz"
exchange = Exchange(wallet, base_url=base_url, account_address=account_address)
info = Info(base_url=base_url)

# Pool and NFT ABIs (minimal for this use case)
POOL_ABI = [
    {"inputs": [], "name": "token0", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"},
    {"inputs": [], "name": "token1", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"},
    {"inputs": [], "name": "slot0", "outputs": [
        {"internalType": "uint160", "name": "sqrtPriceX96", "type": "uint160"},
        {"internalType": "int24", "name": "tick", "type": "int24"},
        {"internalType": "uint16", "name": "observationIndex", "type": "uint16"},
        {"internalType": "uint16", "name": "observationCardinality", "type": "uint16"},
        {"internalType": "uint16", "name": "observationCardinalityNext", "type": "uint16"},
        {"internalType": "uint8", "name": "feeProtocol", "type": "uint8"},
        {"internalType": "bool", "name": "unlocked", "type": "bool"}
    ], "stateMutability": "view", "type": "function"}
]
NFT_ABI = [
    {"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"positions","outputs":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},
    {"constant": True, "inputs": [{"name": "owner", "type": "address"}], "name": "balanceOf", "outputs": [{"name": "balance", "type": "uint256"}], "type": "function"},
    {"constant": True, "inputs": [{"name": "owner", "type": "address"}, {"name": "index", "type": "uint256"}], "name": "tokenOfOwnerByIndex", "outputs": [{"name": "tokenId", "type": "uint256"}], "type": "function"}
]
ERC20_ABI = [
    {"constant": True, "inputs": [], "name": "symbol", "outputs": [{"name": "", "type": "string"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "decimals", "outputs": [{"name": "", "type": "uint8"}], "type": "function"}
]

def get_token_info(token_address):
    token_contract = web3.eth.contract(address=token_address, abi=ERC20_ABI)
    try:
        symbol = token_contract.functions.symbol().call()
    except Exception:
        symbol = token_address
    try:
        decimals = token_contract.functions.decimals().call()
    except Exception:
        decimals = 18
    return symbol, decimals

def tick_to_sqrt_price(tick):
    return math.pow(1.0001, tick / 2)

def get_amounts_from_liquidity(liquidity, tickLower, tickUpper, currentTick, decimals0, decimals1):
    sqrtLower = tick_to_sqrt_price(tickLower)
    sqrtUpper = tick_to_sqrt_price(tickUpper)
    sqrtCurrent = tick_to_sqrt_price(currentTick)
    liquidity = float(liquidity)
    if currentTick <= tickLower:
        amount0 = liquidity * (sqrtUpper - sqrtLower) / (sqrtUpper * sqrtLower)
        amount1 = 0
    elif currentTick >= tickUpper:
        amount0 = 0
        amount1 = liquidity * (sqrtUpper - sqrtLower)
    else:
        amount0 = liquidity * (sqrtUpper - sqrtCurrent) / (sqrtUpper * sqrtCurrent)
        amount1 = liquidity * (sqrtCurrent - sqrtLower)
    amount0 /= 10 ** decimals0
    amount1 /= 10 ** decimals1
    return amount0, amount1

def get_coingecko_price(symbol):
    # Map symbol to Coingecko ID
    coingecko_ids = {"wS": "wrapped-sonic", "WBTC": "wrapped-bitcoin"}
    if symbol not in coingecko_ids:
        return None
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coingecko_ids[symbol]}&vs_currencies=usd"
    try:
        resp = requests.get(url)
        data = resp.json()
        price = float(data[coingecko_ids[symbol]]['usd'])
        print(f"Got price for {symbol}: ${price:.6f}")  # Debug print
        return price
    except Exception as e:
        print(f"Error fetching price from Coingecko: {e}")
        return None

def open_hyperliquid_position(asset, is_long, usd_value):
    symbol_map = {"WBTC": "BTC", "wS": "S"}
    name = symbol_map.get(asset, asset)
    mids = info.all_mids()
    mid = float(mids[name])

    if usd_value < 10:
        print(f"Order not placed: Notional value ${usd_value:.2f} is below Hyperliquid minimum of $10.")
        return False, 0

    # Use integer size for S, float for others
    if name == "S":
        size = int(usd_value / mid)
    else:
        size = round(usd_value / mid, 5)

    print(f"Opening {name} position:")
    print(f"  Direction: {'LONG' if is_long else 'SHORT'}")
    print(f"  USD Value: ${usd_value:.2f}")
    print(f"  Mid Price: ${mid:.2f}")
    print(f"  Size: {size}")

    try:
        result = exchange.market_open(name=name, is_buy=is_long, sz=size, slippage=0.05)
        print(f"Order result: {result}")

        if result.get('status') == 'ok':
            statuses = result.get('response', {}).get('data', {}).get('statuses', [])
            if statuses and 'error' in statuses[0]:
                print(f"Failed to open position: {statuses[0]['error']}")
                return False, 0
            elif statuses and 'filled' in statuses[0]:
                print(f"Successfully opened {'LONG' if is_long else 'SHORT'} {name} for ${usd_value:.2f} (size: {size})")
                return True, usd_value
            else:
                print(f"Unexpected response format: {result}")
                return False, 0
        else:
            print(f"Failed to open position: {result}")
            return False, 0
    except Exception as e:
        print(f"Error placing order: {str(e)}")
        return False, 0

def close_hyperliquid_position(asset, is_long):
    # asset: "BTC" or "wS" (map to Hyperliquid symbol)
    symbol_map = {"WBTC": "BTC", "wS": "S"}
    name = symbol_map.get(asset, asset)
    # Close all positions for this asset
    # For simplicity, use market_close
    print(f"Attempting to close {'LONG' if is_long else 'SHORT'} position for {name}...")
    try:
        result = exchange.market_close(coin=name)
        print(f"Close order result for {name}: {result}")
        if result.get('status') == 'ok':
            print(f"Successfully closed position for {name}")
        else:
            print(f"Failed to close position for {name}: {result}")
    except Exception as e:
        print(f"Error closing position for {name}: {str(e)}")

def orchestrate():
    pool = web3.eth.contract(address=POOL_ADDRESS, abi=POOL_ABI)
    nft_contract = web3.eth.contract(address=NFT_CONTRACT_ADDRESS, abi=NFT_ABI)
    token0_addr = pool.functions.token0().call()
    token1_addr = pool.functions.token1().call()
    symbol0, decimals0 = get_token_info(token0_addr)
    symbol1, decimals1 = get_token_info(token1_addr)
    print(f"Orchestrator started. Tracking wallet LP tokens in pool: {POOL_ADDRESS}")
    print(f"Wallet: {WALLET}")
    print(f"Token0: {symbol0} ({token0_addr})")
    print(f"Token1: {symbol1} ({token1_addr})")
    print(f"Update interval: 15 seconds\n")

    symbol_map = {"WBTC": "BTC", "wS": "S"}

    try:
        hedge_paused = False
        while True:
            # 1. Get LP State from Sonic
            slot0 = pool.functions.slot0().call()
            currentTick = slot0[1]
            balance = nft_contract.functions.balanceOf(WALLET).call()
            token_ids = [nft_contract.functions.tokenOfOwnerByIndex(WALLET, i).call() for i in range(balance)]

            total0, total1 = 0, 0
            for token_id in token_ids:
                try:
                    pos = nft_contract.functions.positions(token_id).call()
                    if (web3.to_checksum_address(pos[0]) == token0_addr and web3.to_checksum_address(pos[1]) == token1_addr):
                        amount0, amount1 = get_amounts_from_liquidity(pos[5], pos[3], pos[4], currentTick, decimals0, decimals1)
                        total0 += amount0
                        total1 += amount1
                except Exception as e:
                    print(f"  Error fetching position for token {token_id}: {e}")

            print(f"[{time.strftime('%H:%M:%S')}] LP State | {symbol0}: {total0:.8f}, {symbol1}: {total1:.8f}")

            # 2. Get Exchange State from Hyperliquid
            user_state = info.user_state(account_address)
            open_positions = {}
            if user_state and "assetPositions" in user_state:
                for position_data in user_state["assetPositions"]:
                    if "position" in position_data:
                        pos = position_data["position"]
                        size = float(pos["szi"])
                        if size != 0:
                            open_positions[pos["coin"]] = size

            print(f"[{time.strftime('%H:%M:%S')}] HL State | Positions: {open_positions}")

            # 3. Reconciliation Logic
            mids = info.all_mids()

            if total0 > 0 and total1 > 0:
                # LP is IN range, close any open hedges
                if open_positions:
                    print("LP is in range. Closing all open hedge positions...")
                    for asset, size in open_positions.items():
                        close_hyperliquid_position(asset)
                hedge_paused = False  # Reset pause when LP is back in range
            else:
                if hedge_paused:
                    print("Hedge adjustment paused until LP moves back in range.")
                    time.sleep(15)
                    continue
                asset_we_have, other_asset, amount_we_have = (symbol1, symbol0, total1) if total0 == 0 else (symbol0, symbol1, total0)

                hl_asset_we_have = symbol_map.get(asset_we_have)
                hl_other_asset = symbol_map.get(other_asset)

                price_asset_we_have = float(mids[hl_asset_we_have])
                lp_usd_value = amount_we_have * price_asset_we_have

                if lp_usd_value < 10:
                    print(f"LP value (${lp_usd_value:.2f}) is below minimum. Closing any open positions and not hedging.")
                    if open_positions:
                        for asset, size in open_positions.items():
                            close_hyperliquid_position(asset)
                    time.sleep(15)
                    continue

                target_positions_usd = {
                    hl_asset_we_have: -lp_usd_value,
                    hl_other_asset: lp_usd_value
                }
                print(f"LP out of range. Target: ${lp_usd_value:.2f} short {hl_asset_we_have}, ${lp_usd_value:.2f} long {hl_other_asset}.")

                all_correct = True
                for asset, target_usd in target_positions_usd.items():
                    asset_price = float(mids[asset])
                    current_size_asset = open_positions.get(asset, 0.0)
                    current_usd = current_size_asset * asset_price
                    delta_usd = target_usd - current_usd

                    if abs(delta_usd) > 5:
                        print(f"  Adjusting {asset}: Current ${current_usd:.2f}, Target ${target_usd:.2f}. Trading ${abs(delta_usd):.2f}.")
                        open_hyperliquid_position(asset, delta_usd > 0, abs(delta_usd))
                        all_correct = False
                    else:
                        print(f"  {asset} position is already correct.")
                if all_correct:
                    hedge_paused = True

            time.sleep(15)
    except KeyboardInterrupt:
        print("\nStopped orchestrator.")

if __name__ == "__main__":
    orchestrate()

# Instructions:
# 1. Ensure config.json has your Hyperliquid credentials.
# 2. Run: python lp_hedge_orchestrator.py
# 1. Set HYPERLIQUID_ACCOUNT_ADDRESS and HYPERLIQUID_SECRET_KEY environment variables.
# 2. Run: python lp_hedge_orchestrator.py 
